/**
 * @author ArcAnc
 * Created at: 25.06.2025
 * Copyright (c) 2025
 * <p>
 * This code is licensed under "Arc's License of Common Sense"
 * Details can be found in the license file in the root folder of this project
 */

package com.arcanc.biomorphosis.util.model.obj;


import com.arcanc.biomorphosis.util.helper.RenderHelper;
import com.google.common.base.Function;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.RandomSource;
import org.jetbrains.annotations.NotNull;
import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class MorpherEggObj extends BioObjModel
{
	private static final RandomSource RANDOM_SOURCE = RandomSource.create();
	private final List<Float> vertexPhases = new ArrayList<>();


	private final Set<Integer> usedIndexes = new HashSet<>();

	public MorpherEggObj(ResourceLocation texture)
	{
		super(texture, true);

		RANDOM_SOURCE.setSeed(654l);

		addVertex(0.12560118395208875f, 0.625f, 0.46875f);
		addVertex(0.11602540378443864f, 0.3750000000000001f, 0.43301270189221935f);
		addVertex(0.06698729810778065f, 0.19198729810778065f, 0.24999999999999994f);
		addVertex(0.34314881604791114f, 0.625f, 0.34314881604791125f);
		addVertex(0.31698729810778065f, 0.3750000000000001f, 0.3169872981077807f);
		addVertex(0.18301270189221924f, 0.19198729810778065f, 0.18301270189221927f);
		addVertex(0.46875f, 0.625f, 0.12560118395208875f);
		addVertex(0.43301270189221935f, 0.3750000000000001f, 0.11602540378443864f);
		addVertex(0.24999999999999994f, 0.19198729810778065f, 0.06698729810778065f);
		addVertex(0.46875f, 0.625f, -0.1256011839520888f);
		addVertex(0.43301270189221935f, 0.3750000000000001f, -0.1160254037844387f);
		addVertex(0.24999999999999994f, 0.19198729810778065f, -0.06698729810778067f);
		addVertex(0.34314881604791125f, 0.625f, -0.34314881604791125f);
		addVertex(0.3169872981077807f, 0.3750000000000001f, -0.31698729810778065f);
		addVertex(0.18301270189221927f, 0.19198729810778065f, -0.18301270189221924f);
		addVertex(0.12560118395208889f, 0.625f, -0.4687499999999999f);
		addVertex(0.11602540378443876f, 0.3750000000000001f, -0.4330127018922193f);
		addVertex(0.06698729810778072f, 0.19198729810778065f, -0.2499999999999999f);
		addVertex(-0.12560118395208855f, 0.625f, -0.46875f);
		addVertex(-0.11602540378443847f, 0.3750000000000001f, -0.4330127018922194f);
		addVertex(-0.06698729810778055f, 0.19198729810778065f, -0.24999999999999997f);
		addVertex(-0.34314881604791125f, 0.625f, -0.34314881604791136f);
		addVertex(-0.31698729810778065f, 0.3750000000000001f, -0.31698729810778076f);
		addVertex(-0.18301270189221924f, 0.19198729810778065f, -0.1830127018922193f);
		addVertex(-0.4687499999999999f, 0.625f, -0.1256011839520887f);
		addVertex(-0.43301270189221935f, 0.3750000000000001f, -0.1160254037844386f);
		addVertex(-0.24999999999999994f, 0.19198729810778065f, -0.06698729810778062f);
		addVertex(-0.46875f, 0.625f, 0.12560118395208852f);
		addVertex(-0.4330127018922194f, 0.3750000000000001f, 0.11602540378443844f);
		addVertex(-0.24999999999999997f, 0.19198729810778065f, 0.06698729810778054f);
		addVertex(-0.34314881604791136f, 0.625f, 0.34314881604791114f);
		addVertex(-0.31698729810778076f, 0.3750000000000001f, 0.3169872981077806f);
		addVertex(-0.1830127018922193f, 0.19198729810778065f, 0.18301270189221922f);
		addVertex(-0.12560118395208872f, 0.625f, 0.46875f);
		addVertex(-0.11602540378443861f, 0.3750000000000001f, 0.43301270189221935f);
		addVertex(-0.06698729810778063f, 0.19198729810778065f, 0.24999999999999994f);
		addVertex(-0.31518082617584076f, 0.10091812428362146f, -0.08373412263472577f);
		addVertex(-0.31518082617584076f, 0.10091812428362146f, 0.08373412263472568f);
		addVertex(-0.23153601533344165f, 0.10091812428362146f, 0.2287658773652741f);
		addVertex(-0.08331149469572054f, 0.09823729810778059f, -0.31249999999999994f);
		addVertex(-0.228188556864244f, 0.09823729810778059f, -0.2287658773652742f);
		addVertex(0.08397812698907757f, 0.09823729810778059f, -0.3124999999999999f);
		addVertex(0.22885518915760086f, 0.09823729810778059f, -0.2287658773652741f);
		addVertex(0.3124999999999999f, 0.09823729810778059f, -0.07592162263472585f);
		addVertex(0.3124999999999999f, 0.09823729810778059f, 0.08373412263472581f);
		addVertex(0.22885518915760084f, 0.09823729810778059f, 0.2287658773652741f);
		addVertex(0.0839781269890775f, 0.09823729810778059f, 0.31249999999999994f);
		addVertex(-0.08331149469572066f, 0.09823729810778059f, 0.31249999999999994f);
		addVertex(0.13397459621556132f, 0.0f, 0.49999999999999994f);
		addVertex(0.3660254037844386f, 0.0f, 0.36602540378443865f);
		addVertex(0.49999999999999994f, 0.0f, 0.13397459621556132f);
		addVertex(0.49999999999999994f, 0.0f, -0.13397459621556138f);
		addVertex(0.36602540378443865f, 0.0f, -0.3660254037844386f);
		addVertex(0.1339745962155615f, 0.0f, -0.4999999999999999f);
		addVertex(-0.13397459621556113f, 0.0f, -0.5f);
		addVertex(-0.3660254037844386f, 0.0f, -0.3660254037844387f);
		addVertex(-0.49999999999999994f, 0.0f, -0.13397459621556126f);
		addVertex(-0.5f, 0.0f, 0.1339745962155611f);
		addVertex(-0.3660254037844387f, 0.0f, 0.36602540378443854f);
		addVertex(-0.1339745962155613f, 0.0f, 0.49999999999999994f);
		addVertex(0.0f, 1.0625f, 0.0f);
		addVertex(0.06698729810778065f, 0.9955127018922194f, 0.24999999999999994f);
		addVertex(0.11602540378443862f, 0.8125f, 0.4330127018922193f);
		addVertex(0.18301270189221924f, 0.9955127018922194f, 0.18301270189221927f);
		addVertex(0.31698729810778065f, 0.8125f, 0.31698729810778065f);
		addVertex(0.24999999999999994f, 0.9955127018922194f, 0.06698729810778065f);
		addVertex(0.4330127018922193f, 0.8125f, 0.11602540378443862f);
		addVertex(0.24999999999999994f, 0.9955127018922194f, -0.06698729810778067f);
		addVertex(0.4330127018922193f, 0.8125f, -0.11602540378443868f);
		addVertex(0.18301270189221927f, 0.9955127018922194f, -0.18301270189221924f);
		addVertex(0.31698729810778065f, 0.8125f, -0.31698729810778065f);
		addVertex(0.06698729810778072f, 0.9955127018922194f, -0.2499999999999999f);
		addVertex(0.11602540378443875f, 0.8125f, -0.43301270189221924f);
		addVertex(-0.06698729810778055f, 0.9955127018922194f, -0.24999999999999997f);
		addVertex(-0.11602540378443846f, 0.8125f, -0.43301270189221935f);
		addVertex(-0.18301270189221924f, 0.9955127018922194f, -0.1830127018922193f);
		addVertex(-0.31698729810778065f, 0.8125f, -0.3169872981077807f);
		addVertex(-0.24999999999999994f, 0.9955127018922194f, -0.06698729810778062f);
		addVertex(-0.4330127018922193f, 0.8125f, -0.11602540378443858f);
		addVertex(-0.24999999999999997f, 0.9955127018922194f, 0.06698729810778054f);
		addVertex(-0.43301270189221935f, 0.8125f, 0.11602540378443843f);
		addVertex(-0.1830127018922193f, 0.9955127018922194f, 0.18301270189221922f);
		addVertex(-0.3169872981077807f, 0.8125f, 0.3169872981077806f);
		addVertex(-0.06698729810778063f, 0.9955127018922194f, 0.24999999999999994f);
		addVertex(-0.1160254037844386f, 0.8125f, 0.4330127018922193f);
		addVertex(-0.39062499999999994f, 0.5423877018922194f, -0.10048094716167093f);
		addVertex(-0.390625f, 0.5423877018922194f, 0.10048094716167082f);
		addVertex(-0.2859573467065926f, 0.5423877018922194f, 0.27451905283832884f);
		addVertex(-0.10466765329340727f, 0.5423877018922194f, 0.375f);
		addVertex(0.10466765329340727f, 0.5423877018922194f, 0.375f);
		addVertex(0.2859573467065925f, 0.5423877018922194f, 0.2745190528383289f);
		addVertex(0.390625f, 0.5423877018922194f, 0.10048094716167098f);
		addVertex(0.390625f, 0.5423877018922194f, -0.10048094716167101f);
		addVertex(0.2859573467065927f, 0.5423877018922194f, -0.27451905283832884f);
		addVertex(0.10466765329340735f, 0.5423877018922194f, -0.3749999999999999f);
		addVertex(-0.10466765329340709f, 0.5423877018922194f, -0.375f);
		addVertex(-0.28595734670659256f, 0.5423877018922194f, -0.274519052838329f);
		addVertex(0.0f, 0.0f, 0.0f);
		addUV(0.55693125f, 0.6038587998405722f);
		addUV(0.55244375f, 0.5391525498405723f);
		addUV(0.6099008776858359f, 0.5311445142297898f);
		addUV(0.6232774571252735f, 0.5946118567597313f);
		addUV(0.4079725428747265f, 0.45398685675973127f);
		addUV(0.42134912231416416f, 0.3905195142297898f);
		addUV(0.47880625f, 0.39852754984057215f);
		addUV(0.47431875f, 0.4632337998405722f);
		addUV(0.47431875f, 0.4632337998405722f);
		addUV(0.47880625f, 0.39852754984057215f);
		addUV(0.53681875f, 0.39852754984057215f);
		addUV(0.54130625f, 0.4632337998405722f);
		addUV(0.54130625f, 0.4632337998405722f);
		addUV(0.53681875f, 0.39852754984057215f);
		addUV(0.5942758776858359f, 0.3905195142297898f);
		addUV(0.6076524571252735f, 0.45398685675973127f);
		addUV(0.2048475428747265f, 0.5321118567597313f);
		addUV(0.21822412231416416f, 0.4686445142297898f);
		addUV(0.27568125f, 0.47665254984057215f);
		addUV(0.27119375f, 0.5413587998405722f);
		addUV(0.27119375f, 0.5413587998405722f);
		addUV(0.27568125f, 0.47665254984057215f);
		addUV(0.33369375f, 0.47665254984057215f);
		addUV(0.33818125f, 0.5413587998405722f);
		addUV(0.33818125f, 0.5413587998405722f);
		addUV(0.33369375f, 0.47665254984057215f);
		addUV(0.39115087768583584f, 0.4686445142297898f);
		addUV(0.4045274571252735f, 0.5321118567597313f);
		addUV(0.001722542874726521f, 0.43836185675973127f);
		addUV(0.015099122314164173f, 0.3748945142297898f);
		addUV(0.07255625f, 0.38290254984057215f);
		addUV(0.06806875f, 0.4476087998405722f);
		addUV(0.06806875f, 0.4476087998405722f);
		addUV(0.07255625f, 0.38290254984057215f);
		addUV(0.13056875f, 0.38290254984057215f);
		addUV(0.13505625f, 0.4476087998405722f);
		addUV(0.13505625f, 0.4476087998405722f);
		addUV(0.13056875f, 0.38290254984057215f);
		addUV(0.18802587768583584f, 0.3748945142297898f);
		addUV(0.2014024571252735f, 0.43836185675973127f);
		addUV(0.4235975428747265f, 0.5946118567597313f);
		addUV(0.43697412231416416f, 0.5311445142297898f);
		addUV(0.49443125f, 0.5391525498405723f);
		addUV(0.48994375f, 0.6038587998405722f);
		addUV(0.48994375f, 0.6038587998405722f);
		addUV(0.49443125f, 0.5391525498405723f);
		addUV(0.55244375f, 0.5391525498405723f);
		addUV(0.55693125f, 0.6038587998405722f);
		addUV(0.30734000352801416f, 0.9968301087279154f);
		addUV(0.25329658601104227f, 0.9997370982407381f);
		addUV(0.26532130535680853f, 0.9338376955051627f);
		addUV(0.31485517263956625f, 0.955644519138043f);
		addUV(0.3399232961824896f, 0.9221253478162572f);
		addUV(0.31485517263956625f, 0.955644519138043f);
		addUV(0.26532105287343155f, 0.933837584351708f);
		addUV(0.305463054426963f, 0.8802097402915381f);
		addUV(0.3779657016551723f, 0.9030318934376014f);
		addUV(0.33992329618248956f, 0.9221253478162572f);
		addUV(0.30546284874397184f, 0.8802094901096736f);
		addUV(0.3653033587054395f, 0.850126856301955f);
		addUV(0.3779689837054395f, 0.903045606301955f);
		addUV(0.3653033587054395f, 0.850126856301955f);
		addUV(0.43229085870543954f, 0.850126856301955f);
		addUV(0.4197924212054395f, 0.903045606301955f);
		addUV(0.45715782710639363f, 0.9218594588293862f);
		addUV(0.419792188608412f, 0.9030465911245737f);
		addUV(0.43229085870543954f, 0.850126856301955f);
		addUV(0.49213471739059866f, 0.8802273287149771f);
		addUV(0.4820969391926683f, 0.9554727828850473f);
		addUV(0.45715782710639363f, 0.9218594588293862f);
		addUV(0.4921351007527511f, 0.8802268724084593f);
		addUV(0.5320709293215238f, 0.9340084255502383f);
		addUV(0.488953063665064f, 0.9947920048187151f);
		addUV(0.4820969391926683f, 0.9554727828850473f);
		addUV(0.532071376391849f, 0.9340082335288051f);
		addUV(0.5435784139889577f, 1.0f);
		addUV(0.4572812998434881f, 0.8082611779266831f);
		addUV(0.43202607191670817f, 0.84375f);
		addUV(0.3823674494020295f, 0.8204046680697632f);
		addUV(0.4223066581328729f, 0.766631724233977f);
		addUV(0.4946469383414697f, 0.7894483102218705f);
		addUV(0.4572812998434881f, 0.8082611779266831f);
		addUV(0.42230440955928306f, 0.7666290478122739f);
		addUV(0.4821482682444422f, 0.7365285753992517f);
		addUV(0.5364703758414697f, 0.7894483102218705f);
		addUV(0.4946469383414697f, 0.7894483102218705f);
		addUV(0.4821485008414697f, 0.7365295602218704f);
		addUV(0.5491360008414697f, 0.7365295602218704f);
		addUV(0.5738326017522747f, 0.8082644808378627f);
		addUV(0.5364703758414697f, 0.7894483102218705f);
		addUV(0.5491361387032365f, 0.7365289842161566f);
		addUV(0.6089774728951134f, 0.7666344765622675f);
		addUV(0.5992866140834525f, 0.8420314746337839f);
		addUV(0.5738326017522747f, 0.8082644808378627f);
		addUV(0.6089766749750551f, 0.7666354217191098f);
		addUV(0.6488825505979705f, 0.8204177608227581f);
		addUV(0.321434375f, 0.6192172631592514f);
		addUV(0.3507225017646178f, 0.6354664760534866f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.5066906250000001f, 0.64286875f);
		addUV(0.49443125f, 0.734375f);
		addUV(0.43846453877264363f, 0.7191048529593294f);
		addUV(0.4743780193689504f, 0.6340524692425173f);
		addUV(0.34150625f, 0.5636273986081286f);
		addUV(0.34599375f, 0.5468805236081286f);
		addUV(0.4040059237262433f, 0.5803754912272526f);
		addUV(0.39174593991668133f, 0.5926347030903742f);
		addUV(0.35072250176461783f, 0.6354664760534866f);
		addUV(0.368449912093355f, 0.6638842559122138f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.3381219806310496f, 0.30592746924251735f);
		addUV(0.37403546122735637f, 0.39097985295932924f);
		addUV(0.31806875f, 0.40625f);
		addUV(0.30580937499999994f, 0.31474375f);
		addUV(0.39174593991668133f, 0.5926347030903742f);
		addUV(0.4040059237262433f, 0.5803754912272526f);
		addUV(0.43749723844373045f, 0.638389773906126f);
		addUV(0.42075008091385574f, 0.6428762194017479f);
		addUV(0.368449912093355f, 0.6638842559122138f);
		addUV(0.3701647420544816f, 0.6973340787408466f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.305809375f, 0.31474375f);
		addUV(0.31806875f, 0.40625f);
		addUV(0.26005625f, 0.40625f);
		addUV(0.272315625f, 0.31474375f);
		addUV(0.42075008091385574f, 0.6428762194017479f);
		addUV(0.43749723844373045f, 0.638389773906126f);
		addUV(0.4374930204618022f, 0.7053772737733298f);
		addUV(0.420746428058075f, 0.7008887192867438f);
		addUV(0.3701647420544816f, 0.6973340787408466f);
		addUV(0.35543634839489846f, 0.727415729448061f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.27231562500000006f, 0.31474375f);
		addUV(0.26005625f, 0.40625f);
		addUV(0.20408953877264363f, 0.39097985295932924f);
		addUV(0.2400030193689504f, 0.30592746924251735f);
		addUV(0.420746428058075f, 0.7008887192867438f);
		addUV(0.4374930204618022f, 0.7053772737733298f);
		addUV(0.40399440007384246f, 0.7633873383169361f);
		addUV(0.3917359602057665f, 0.7511265826095422f);
		addUV(0.35543634839489846f, 0.727415729448061f);
		addUV(0.3279634554792765f, 0.7465748380888426f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.6818719806310496f, 0.8996774692425173f);
		addUV(0.7177854612273564f, 0.9847298529593292f);
		addUV(0.66181875f, 1.0f);
		addUV(0.6495593749999999f, 0.90849375f);
		addUV(0.3917359602057665f, 0.7511265826095422f);
		addUV(0.40399440007384246f, 0.7633873383169361f);
		addUV(0.34597800867235445f, 0.796875f);
		addUV(0.3414926176988985f, 0.7801275600066498f);
		addUV(0.31472970105653525f, 0.75f);
		addUV(0.2814115445207235f, 0.7465748380888426f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.649559375f, 0.90849375f);
		addUV(0.66181875f, 1.0f);
		addUV(0.60380625f, 1.0f);
		addUV(0.616065625f, 0.90849375f);
		addUV(0.3414926176988985f, 0.7801275600066498f);
		addUV(0.34597800867235445f, 0.796875f);
		addUV(0.2789905092035393f, 0.7968665640361604f);
		addUV(0.28348011815891505f, 0.780120254295103f);
		addUV(0.2814115445207235f, 0.7465748380888426f);
		addUV(0.2539386516051016f, 0.727415729448061f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.6160656250000001f, 0.90849375f);
		addUV(0.60380625f, 1.0f);
		addUV(0.5478395387726437f, 0.9847298529593292f);
		addUV(0.5837530193689504f, 0.8996774692425173f);
		addUV(0.2835073823011015f, 0.7801275600066498f);
		addUV(0.27902199132764555f, 0.796875f);
		addUV(0.2210055999261575f, 0.7633873383169361f);
		addUV(0.2332640397942335f, 0.7511265826095422f);
		addUV(0.2539386516051016f, 0.727415729448061f);
		addUV(0.23921025794551842f, 0.6973340787408466f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.7443719806310496f, 0.6653024692425173f);
		addUV(0.7802854612273564f, 0.7503548529593294f);
		addUV(0.72431875f, 0.765625f);
		addUV(0.7120593749999999f, 0.67411875f);
		addUV(0.23326403979423346f, 0.7511265826095422f);
		addUV(0.2210055999261575f, 0.7633873383169361f);
		addUV(0.18750697953819778f, 0.7053772737733298f);
		addUV(0.204253571941925f, 0.7008887192867438f);
		addUV(0.23921025794551842f, 0.6973340787408466f);
		addUV(0.240925087906645f, 0.6638842559122138f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.712059375f, 0.67411875f);
		addUV(0.72431875f, 0.765625f);
		addUV(0.66630625f, 0.765625f);
		addUV(0.678565625f, 0.67411875f);
		addUV(0.20425357194192498f, 0.7008887192867438f);
		addUV(0.18750697953819778f, 0.7053772737733298f);
		addUV(0.18750276155626955f, 0.638389773906126f);
		addUV(0.20424991908614426f, 0.6428762194017479f);
		addUV(0.24092508790664502f, 0.6638842559122138f);
		addUV(0.2586524982353822f, 0.6354664760534866f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.6785656250000001f, 0.67411875f);
		addUV(0.66630625f, 0.765625f);
		addUV(0.6103395387726437f, 0.7503548529593294f);
		addUV(0.6462530193689504f, 0.6653024692425173f);
		addUV(0.20424991908614426f, 0.6428762194017479f);
		addUV(0.18750276155626955f, 0.638389773906126f);
		addUV(0.2209940762737567f, 0.5803754912272526f);
		addUV(0.23325406008331867f, 0.5926347030903742f);
		addUV(0.2586524982353822f, 0.6354664760534866f);
		addUV(0.287940625f, 0.6192172631592514f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.5724969806310496f, 0.6340524692425173f);
		addUV(0.6084104612273564f, 0.7191048529593294f);
		addUV(0.55244375f, 0.734375f);
		addUV(0.5401843749999999f, 0.64286875f);
		addUV(0.23325406008331867f, 0.5926347030903742f);
		addUV(0.2209940762737567f, 0.5803754912272526f);
		addUV(0.27900625f, 0.5468805236081286f);
		addUV(0.28349375f, 0.5636273986081286f);
		addUV(0.287940625f, 0.6192172631592514f);
		addUV(0.321434375f, 0.6192172631592514f);
		addUV(0.3046875f, 0.6839219506592514f);
		addUV(0.540184375f, 0.64286875f);
		addUV(0.55244375f, 0.734375f);
		addUV(0.49443125f, 0.734375f);
		addUV(0.506690625f, 0.64286875f);
		addUV(0.28349375f, 0.5636273986081286f);
		addUV(0.27900625f, 0.5468805236081286f);
		addUV(0.34599375f, 0.5468805236081286f);
		addUV(0.34150625f, 0.5636273986081286f);
		addUV(0.55244375f, 0.5391525498405723f);
		addUV(0.5556537223418807f, 0.47337347154042053f);
		addUV(0.5888268259045175f, 0.46875f);
		addUV(0.6099008776858359f, 0.5311445142297898f);
		addUV(0.42134912231416416f, 0.3905195142297898f);
		addUV(0.4424231740954826f, 0.328125f);
		addUV(0.4755962776581193f, 0.33274847154042053f);
		addUV(0.47880625f, 0.39852754984057215f);
		addUV(0.47880625f, 0.39852754984057215f);
		addUV(0.491065625f, 0.3338212998405722f);
		addUV(0.524559375f, 0.3338212998405722f);
		addUV(0.53681875f, 0.39852754984057215f);
		addUV(0.53681875f, 0.39852754984057215f);
		addUV(0.5400287223418807f, 0.33274847154042053f);
		addUV(0.5732018259045175f, 0.328125f);
		addUV(0.5942758776858359f, 0.3905195142297898f);
		addUV(0.21822412231416416f, 0.4686445142297898f);
		addUV(0.23929817409548257f, 0.40625f);
		addUV(0.2724712776581193f, 0.41087347154042053f);
		addUV(0.27568125f, 0.47665254984057215f);
		addUV(0.27568125f, 0.47665254984057215f);
		addUV(0.287940625f, 0.4119462998405722f);
		addUV(0.321434375f, 0.4119462998405722f);
		addUV(0.33369375f, 0.47665254984057215f);
		addUV(0.33369375f, 0.47665254984057215f);
		addUV(0.3369037223418807f, 0.41087347154042053f);
		addUV(0.37007682590451746f, 0.40625f);
		addUV(0.39115087768583584f, 0.4686445142297898f);
		addUV(0.015099122314164173f, 0.3748945142297898f);
		addUV(0.03617317409548257f, 0.3125f);
		addUV(0.06934627765811928f, 0.31712347154042053f);
		addUV(0.07255624999999997f, 0.38290254984057215f);
		addUV(0.07255625f, 0.38290254984057215f);
		addUV(0.08481562499999999f, 0.3181962998405722f);
		addUV(0.11830937500000001f, 0.3181962998405722f);
		addUV(0.13056875f, 0.38290254984057215f);
		addUV(0.13056875f, 0.38290254984057215f);
		addUV(0.1337787223418807f, 0.31712347154042053f);
		addUV(0.16695182590451746f, 0.3125f);
		addUV(0.18802587768583584f, 0.3748945142297898f);
		addUV(0.43697412231416416f, 0.5311445142297898f);
		addUV(0.4580481740954826f, 0.46875f);
		addUV(0.4912212776581193f, 0.47337347154042053f);
		addUV(0.49443125f, 0.5391525498405723f);
		addUV(0.49443125f, 0.5391525498405723f);
		addUV(0.506690625f, 0.4744462998405722f);
		addUV(0.540184375f, 0.4744462998405722f);
		addUV(0.55244375f, 0.5391525498405723f);
		addUV(0.3614083306699616f, 0.8435449418253955f);
		addUV(0.3293002740303407f, 0.8340105835413055f);
		addUV(0.3315330952007557f, 0.8058417241569521f);
		addUV(0.3734286984684482f, 0.8177315376591632f);
		addUV(0.3315330865303407f, 0.8058418335413056f);
		addUV(0.3293002740303407f, 0.8340105835413055f);
		addUV(0.2958065240303407f, 0.8340105835413055f);
		addUV(0.29162058653034073f, 0.8058418335413056f);
		addUV(0.2958065240303407f, 0.8340105835413055f);
		addUV(0.2637600724934449f, 0.84375f);
		addUV(0.2515713015315518f, 0.8180020044462454f);
		addUV(0.2916205865303407f, 0.8058418335413056f);
		addUV(0.04266875f, 0.671875f);
		addUV(0.009174999999999999f, 0.671875f);
		addUV(0.005040625f, 0.640625f);
		addUV(0.046875f, 0.640625f);
		addUV(0.41554398370543955f, 0.9312143563019549f);
		addUV(0.38205023370543956f, 0.9312143563019549f);
		addUV(0.3779689837054395f, 0.903045606301955f);
		addUV(0.4197924212054395f, 0.903045606301955f);
		addUV(0.4343466922713062f, 0.10255569876659398f);
		addUV(0.43409460781716575f, 0.13604850011987712f);
		addUV(0.40625f, 0.140625f);
		addUV(0.40625f, 0.09806598209682449f);
		addUV(0.123535248299676f, 0.7245148299486357f);
		addUV(0.11137923465018872f, 0.7499811537235077f);
		addUV(0.07947005915711143f, 0.7398009863174924f);
		addUV(0.08365587461613448f, 0.7118033651117313f);
		addUV(0.07947005915711143f, 0.7398009863174924f);
		addUV(0.045976309157111435f, 0.7398009863174924f);
		addUV(0.04179037165711144f, 0.7118025488174924f);
		addUV(0.08365599665711143f, 0.7118025488174924f);
		addUV(0.014082257822591038f, 0.75f);
		addUV(0.0014647517003239935f, 0.7245333285127922f);
		addUV(0.04179191753862187f, 0.7118128887393981f);
		addUV(0.04597630915711143f, 0.7398009863174924f);
		addUV(0.5050421875f, 0.609375f);
		addUV(0.546875f, 0.609375f);
		addUV(0.5428203125f, 0.640625f);
		addUV(0.509328125f, 0.640625f);
		addUV(0.4988953758414697f, 0.8176170602218704f);
		addUV(0.4946469383414697f, 0.7894483102218705f);
		addUV(0.5364703758414697f, 0.7894483102218705f);
		addUV(0.5323891258414697f, 0.8176170602218704f);
		addUV(0.457325f, 0.859375f);
		addUV(0.453125f, 0.828125f);
		addUV(0.494959375f, 0.828125f);
		addUV(0.49081718750000003f, 0.859375f);
		addUV(0.25f, 0.90849375f);
		addUV(0.21650625f, 0.96650625f);
		addUV(0.125f, 0.875f);
		addUV(0.25f, 0.84150625f);
		addUV(0.25f, 0.90849375f);
		addUV(0.125f, 0.875f);
		addUV(0.21650625f, 0.78349375f);
		addUV(0.25f, 0.84150625f);
		addUV(0.125f, 0.875f);
		addUV(0.15849375f, 0.75f);
		addUV(0.21650625f, 0.78349375f);
		addUV(0.125f, 0.875f);
		addUV(0.09150625f, 0.75f);
		addUV(0.15849375f, 0.75f);
		addUV(0.125f, 0.875f);
		addUV(0.03349375f, 0.78349375f);
		addUV(0.09150625f, 0.75f);
		addUV(0.125f, 0.875f);
		addUV(0.0f, 0.84150625f);
		addUV(0.03349375f, 0.78349375f);
		addUV(0.125f, 0.875f);
		addUV(0.0f, 0.90849375f);
		addUV(0.0f, 0.84150625f);
		addUV(0.125f, 0.875f);
		addUV(0.03349375f, 0.96650625f);
		addUV(0.0f, 0.90849375f);
		addUV(0.125f, 0.875f);
		addUV(0.09150625f, 1.0f);
		addUV(0.03349375f, 0.96650625f);
		addUV(0.125f, 0.875f);
		addUV(0.15849375f, 1.0f);
		addUV(0.09150625f, 1.0f);
		addUV(0.125f, 0.875f);
		addUV(0.21650625f, 0.96650625f);
		addUV(0.15849375f, 1.0f);
		addUV(0.125f, 0.875f);
		addNormal(0.49496836618887113f, -0.1415106564513026f, 0.8573103583784819f);
		addNormal(0.857310358378482f, -0.14151065645130256f, 0.4949683661888713f);
		addNormal(0.9899367323777422f, -0.1415106564513026f, 0.0f);
		addNormal(0.857310358378482f, -0.14151065645130262f, -0.4949683661888713f);
		addNormal(0.49496836618887124f, -0.14151065645130292f, -0.8573103583784818f);
		addNormal(4.736249637406419e-16f, -0.1415106564513024f, -0.9899367323777422f);
		addNormal(-0.4949683661888708f, -0.14151065645130237f, -0.857310358378482f);
		addNormal(-0.8573103583784819f, -0.141510656451303f, -0.494968366188871f);
		addNormal(-0.9899367323777424f, -0.14151065645130223f, -2.368124818703212e-16f);
		addNormal(-0.857310358378482f, -0.14151065645130234f, 0.49496836618887086f);
		addNormal(-0.4949683661888712f, -0.14151065645130284f, 0.8573103583784818f);
		addNormal(0.0f, -0.1415106564513026f, 0.9899367323777422f);
		addNormal(-0.4792461340242871f, 0.8776805472509773f, -1.2297794823345657e-16f);
		addNormal(-0.41449034846061483f, 0.8780959137525001f, 0.23905086756621577f);
		addNormal(-0.22425177810273245f, 0.8769548791417011f, 0.4250426801714473f);
		addNormal(0.0f, 0.8857868457970565f, 0.46409230096275256f);
		addNormal(0.23237322015851208f, 0.8856388241877459f, 0.40205293139649f);
		addNormal(0.4021921775597338f, 0.8856844231669861f, 0.23195808860465078f);
		addNormal(0.46409230096275245f, 0.8857868457970565f, 0.0f);
		addNormal(0.3989957807096455f, 0.8905754030457455f, -0.21835250963936517f);
		addNormal(0.23225278657744203f, 0.8857649774581414f, -0.4018445568072206f);
		addNormal(1.5399818377583691e-16f, 0.8857868457970565f, -0.46409230096275245f);
		addNormal(-0.23204909272796428f, 0.8859781555496039f, -0.4014921250199693f);
		addNormal(-0.38617993784771726f, 0.8884434644230218f, -0.2480589972727296f);
		addNormal(0.12940952255126031f, 0.9659258262890685f, 0.2241438680420132f);
		addNormal(0.3535533905932738f, 0.7071067811865476f, 0.6123724356957946f);
		addNormal(0.4911581996327841f, 0.18722844798248175f, 0.8507109563180395f);
		addNormal(0.22414386804201314f, 0.9659258262890683f, 0.12940952255126031f);
		addNormal(0.6123724356957945f, 0.7071067811865476f, 0.3535533905932737f);
		addNormal(0.8507109563180394f, 0.18722844798248156f, 0.4911581996327843f);
		addNormal(0.2588190451025205f, 0.9659258262890685f, 0.0f);
		addNormal(0.7071067811865476f, 0.7071067811865476f, 0.0f);
		addNormal(0.9823163992655681f, 0.1872284479824818f, 0.0f);
		addNormal(0.22414386804201314f, 0.9659258262890683f, -0.12940952255126031f);
		addNormal(0.6123724356957945f, 0.7071067811865476f, -0.35355339059327384f);
		addNormal(0.8507109563180397f, 0.18722844798248175f, -0.49115819963278406f);
		addNormal(0.12940952255126031f, 0.9659258262890685f, -0.22414386804201322f);
		addNormal(0.3535533905932738f, 0.7071067811865476f, -0.6123724356957945f);
		addNormal(0.49115819963278384f, 0.18722844798248203f, -0.8507109563180397f);
		addNormal(1.608589638639304e-16f, 0.9659258262890685f, -0.2588190451025205f);
		addNormal(3.4660289604073963e-16f, 0.7071067811865476f, -0.7071067811865476f);
		addNormal(4.341480906531597e-16f, 0.18722844798248156f, -0.9823163992655682f);
		addNormal(-0.12940952255126023f, 0.9659258262890685f, -0.22414386804201328f);
		addNormal(-0.35355339059327356f, 0.7071067811865476f, -0.6123724356957947f);
		addNormal(-0.49115819963278334f, 0.18722844798248153f, -0.8507109563180401f);
		addNormal(-0.22414386804201325f, 0.9659258262890685f, -0.1294095225512603f);
		addNormal(-0.6123724356957946f, 0.7071067811865476f, -0.35355339059327356f);
		addNormal(-0.85071095631804f, 0.18722844798248212f, -0.49115819963278334f);
		addNormal(-0.2588190451025205f, 0.9659258262890683f, -5.3619654621310167e-17f);
		addNormal(-0.7071067811865476f, 0.7071067811865476f, -1.1553429868024662e-16f);
		addNormal(-0.9823163992655682f, 0.18722844798248126f, -4.3414809065316003e-16f);
		addNormal(-0.22414386804201325f, 0.9659258262890685f, 0.12940952255126023f);
		addNormal(-0.6123724356957947f, 0.7071067811865476f, 0.35355339059327373f);
		addNormal(-0.85071095631804f, 0.18722844798248156f, 0.49115819963278357f);
		addNormal(-0.12940952255126034f, 0.9659258262890683f, 0.22414386804201317f);
		addNormal(-0.35355339059327384f, 0.7071067811865476f, 0.6123724356957945f);
		addNormal(-0.4911581996327841f, 0.18722844798248192f, 0.8507109563180397f);
		addNormal(0.0f, 0.9659258262890685f, 0.2588190451025205f);
		addNormal(0.0f, 0.7071067811865476f, 0.7071067811865476f);
		addNormal(0.0f, 0.18722844798248178f, 0.9823163992655681f);
		addNormal(0.3535533905932741f, -0.7071067811865475f, 0.6123724356957946f);
		addNormal(0.6123724356957945f, -0.7071067811865475f, 0.353553390593274f);
		addNormal(0.7071067811865476f, -0.7071067811865475f, 0.0f);
		addNormal(0.6123724356957945f, -0.7071067811865474f, -0.3535533905932741f);
		addNormal(0.3535533905932739f, -0.7071067811865475f, -0.6123724356957947f);
		addNormal(4.0022255066204975e-16f, -0.7071067811865476f, -0.7071067811865476f);
		addNormal(-0.3535533905932737f, -0.7071067811865474f, -0.6123724356957947f);
		addNormal(-0.6123724356957946f, -0.7071067811865476f, -0.3535533905932739f);
		addNormal(-0.7071067811865477f, -0.7071067811865474f, -2.00111275331025e-16f);
		addNormal(-0.6123724356957948f, -0.7071067811865475f, 0.3535533905932738f);
		addNormal(-0.353553390593274f, -0.7071067811865475f, 0.6123724356957946f);
		addNormal(0.0f, -0.7071067811865474f, 0.7071067811865477f);
		addNormal(0.7343880736345257f, 0.5299989400031795f, -0.42399915200254445f);
		addNormal(0.832050294337844f, 0.5547001962252285f, 0.0f);
		addNormal(0.7203022967459245f, 0.5551751691163743f, 0.41586672492416543f);
		addNormal(0.4157752530596779f, 0.5554491477828044f, 0.7201438628291691f);
		addNormal(0.0f, 0.5547001962252289f, 0.8320502943378438f);
		addNormal(-0.4093272088410937f, 0.5742864654590418f, 0.7089755226331305f);
		addNormal(-0.7052643257615849f, 0.5803472877603056f, 0.4071845483282909f);
		addNormal(-0.8131780914728384f, 0.5820149410011672f, -1.6846646039173238e-16f);
		addNormal(-0.7091827266317963f, 0.5543378742937523f, -0.43562527632194964f);
		addNormal(-0.4169343754168167f, 0.5529690724419553f, -0.7213812664038849f);
		addNormal(2.760964443330904e-16f, 0.5547001962252289f, -0.8320502943378438f);
		addNormal(0.416250708188053f, 0.5550221950349866f, -0.7201983830525376f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		addNormal(0.0f, -1.0f, 0.0f);
		newFace(1, 1, 1, 2, 2, 1, 5, 3, 1);
		newFace(1, 1, 1, 5, 3, 1, 4, 4, 1);
		newFace(4, 5, 2, 5, 6, 2, 8, 7, 2);
		newFace(4, 5, 2, 8, 7, 2, 7, 8, 2);
		newFace(7, 9, 3, 8, 10, 3, 11, 11, 3);
		newFace(7, 9, 3, 11, 11, 3, 10, 12, 3);
		newFace(10, 13, 4, 11, 14, 4, 14, 15, 4);
		newFace(10, 13, 4, 14, 15, 4, 13, 16, 4);
		newFace(13, 17, 5, 14, 18, 5, 17, 19, 5);
		newFace(13, 17, 5, 17, 19, 5, 16, 20, 5);
		newFace(16, 21, 6, 17, 22, 6, 20, 23, 6);
		newFace(16, 21, 6, 20, 23, 6, 19, 24, 6);
		newFace(19, 25, 7, 20, 26, 7, 23, 27, 7);
		newFace(19, 25, 7, 23, 27, 7, 22, 28, 7);
		newFace(22, 29, 8, 23, 30, 8, 26, 31, 8);
		newFace(22, 29, 8, 26, 31, 8, 25, 32, 8);
		newFace(25, 33, 9, 26, 34, 9, 29, 35, 9);
		newFace(25, 33, 9, 29, 35, 9, 28, 36, 9);
		newFace(28, 37, 10, 29, 38, 10, 32, 39, 10);
		newFace(28, 37, 10, 32, 39, 10, 31, 40, 10);
		newFace(31, 41, 11, 32, 42, 11, 35, 43, 11);
		newFace(31, 41, 11, 35, 43, 11, 34, 44, 11);
		newFace(34, 45, 12, 35, 46, 12, 2, 47, 12);
		newFace(34, 45, 12, 2, 47, 12, 1, 48, 12);
		newFace(37, 49, 13, 57, 50, 13, 58, 51, 13);
		newFace(37, 49, 13, 58, 51, 13, 38, 52, 13);
		newFace(39, 53, 14, 38, 54, 14, 58, 55, 14);
		newFace(39, 53, 14, 58, 55, 14, 59, 56, 14);
		newFace(48, 57, 15, 39, 58, 15, 59, 59, 15);
		newFace(48, 57, 15, 59, 59, 15, 60, 60, 15);
		newFace(48, 61, 16, 60, 62, 16, 49, 63, 16);
		newFace(48, 61, 16, 49, 63, 16, 47, 64, 16);
		newFace(46, 65, 17, 47, 66, 17, 49, 67, 17);
		newFace(46, 65, 17, 49, 67, 17, 50, 68, 17);
		newFace(45, 69, 18, 46, 70, 18, 50, 71, 18);
		newFace(45, 69, 18, 50, 71, 18, 51, 72, 18);
		newFace(44, 73, 19, 45, 74, 19, 51, 75, 19);
		newFace(44, 73, 19, 51, 75, 19, 52, 76, 19);
		newFace(43, 77, 20, 44, 78, 20, 52, 79, 20);
		newFace(43, 77, 20, 52, 79, 20, 53, 80, 20);
		newFace(42, 81, 21, 43, 82, 21, 53, 83, 21);
		newFace(42, 81, 21, 53, 83, 21, 54, 84, 21);
		newFace(40, 85, 22, 42, 86, 22, 54, 87, 22);
		newFace(40, 85, 22, 54, 87, 22, 55, 88, 22);
		newFace(41, 89, 23, 40, 90, 23, 55, 91, 23);
		newFace(41, 89, 23, 55, 91, 23, 56, 92, 23);
		newFace(37, 93, 24, 41, 94, 24, 56, 95, 24);
		newFace(37, 93, 24, 56, 95, 24, 57, 96, 24);
		newFace(62, 97, 25, 64, 98, 25, 61, 99, 25);
		newFace(62, 100, 26, 63, 101, 26, 65, 102, 26);
		newFace(62, 100, 26, 65, 102, 26, 64, 103, 26);
		newFace(63, 104, 27, 1, 105, 27, 4, 106, 27);
		newFace(63, 104, 27, 4, 106, 27, 65, 107, 27);
		newFace(64, 108, 28, 66, 109, 28, 61, 110, 28);
		newFace(64, 111, 29, 65, 112, 29, 67, 113, 29);
		newFace(64, 111, 29, 67, 113, 29, 66, 114, 29);
		newFace(65, 115, 30, 4, 116, 30, 7, 117, 30);
		newFace(65, 115, 30, 7, 117, 30, 67, 118, 30);
		newFace(66, 119, 31, 68, 120, 31, 61, 121, 31);
		newFace(66, 122, 32, 67, 123, 32, 69, 124, 32);
		newFace(66, 122, 32, 69, 124, 32, 68, 125, 32);
		newFace(67, 126, 33, 7, 127, 33, 10, 128, 33);
		newFace(67, 126, 33, 10, 128, 33, 69, 129, 33);
		newFace(68, 130, 34, 70, 131, 34, 61, 132, 34);
		newFace(68, 133, 35, 69, 134, 35, 71, 135, 35);
		newFace(68, 133, 35, 71, 135, 35, 70, 136, 35);
		newFace(69, 137, 36, 10, 138, 36, 13, 139, 36);
		newFace(69, 137, 36, 13, 139, 36, 71, 140, 36);
		newFace(70, 141, 37, 72, 142, 37, 61, 143, 37);
		newFace(70, 144, 38, 71, 145, 38, 73, 146, 38);
		newFace(70, 144, 38, 73, 146, 38, 72, 147, 38);
		newFace(71, 148, 39, 13, 149, 39, 16, 150, 39);
		newFace(71, 148, 39, 16, 150, 39, 73, 151, 39);
		newFace(72, 152, 40, 74, 153, 40, 61, 154, 40);
		newFace(72, 155, 41, 73, 156, 41, 75, 157, 41);
		newFace(72, 155, 41, 75, 157, 41, 74, 158, 41);
		newFace(73, 159, 42, 16, 160, 42, 19, 161, 42);
		newFace(73, 159, 42, 19, 161, 42, 75, 162, 42);
		newFace(74, 163, 43, 76, 164, 43, 61, 165, 43);
		newFace(74, 166, 44, 75, 167, 44, 77, 168, 44);
		newFace(74, 166, 44, 77, 168, 44, 76, 169, 44);
		newFace(75, 170, 45, 19, 171, 45, 22, 172, 45);
		newFace(75, 170, 45, 22, 172, 45, 77, 173, 45);
		newFace(76, 174, 46, 78, 175, 46, 61, 176, 46);
		newFace(76, 177, 47, 77, 178, 47, 79, 179, 47);
		newFace(76, 177, 47, 79, 179, 47, 78, 180, 47);
		newFace(77, 181, 48, 22, 182, 48, 25, 183, 48);
		newFace(77, 181, 48, 25, 183, 48, 79, 184, 48);
		newFace(78, 185, 49, 80, 186, 49, 61, 187, 49);
		newFace(78, 188, 50, 79, 189, 50, 81, 190, 50);
		newFace(78, 188, 50, 81, 190, 50, 80, 191, 50);
		newFace(79, 192, 51, 25, 193, 51, 28, 194, 51);
		newFace(79, 192, 51, 28, 194, 51, 81, 195, 51);
		newFace(80, 196, 52, 82, 197, 52, 61, 198, 52);
		newFace(80, 199, 53, 81, 200, 53, 83, 201, 53);
		newFace(80, 199, 53, 83, 201, 53, 82, 202, 53);
		newFace(81, 203, 54, 28, 204, 54, 31, 205, 54);
		newFace(81, 203, 54, 31, 205, 54, 83, 206, 54);
		newFace(82, 207, 55, 84, 208, 55, 61, 209, 55);
		newFace(82, 210, 56, 83, 211, 56, 85, 212, 56);
		newFace(82, 210, 56, 85, 212, 56, 84, 213, 56);
		newFace(83, 214, 57, 31, 215, 57, 34, 216, 57);
		newFace(83, 214, 57, 34, 216, 57, 85, 217, 57);
		newFace(84, 218, 58, 62, 219, 58, 61, 220, 58);
		newFace(84, 221, 59, 85, 222, 59, 63, 223, 59);
		newFace(84, 221, 59, 63, 223, 59, 62, 224, 59);
		newFace(85, 225, 60, 34, 226, 60, 1, 227, 60);
		newFace(85, 225, 60, 1, 227, 60, 63, 228, 60);
		newFace(2, 229, 61, 3, 230, 61, 6, 231, 61);
		newFace(2, 229, 61, 6, 231, 61, 5, 232, 61);
		newFace(5, 233, 62, 6, 234, 62, 9, 235, 62);
		newFace(5, 233, 62, 9, 235, 62, 8, 236, 62);
		newFace(8, 237, 63, 9, 238, 63, 12, 239, 63);
		newFace(8, 237, 63, 12, 239, 63, 11, 240, 63);
		newFace(11, 241, 64, 12, 242, 64, 15, 243, 64);
		newFace(11, 241, 64, 15, 243, 64, 14, 244, 64);
		newFace(14, 245, 65, 15, 246, 65, 18, 247, 65);
		newFace(14, 245, 65, 18, 247, 65, 17, 248, 65);
		newFace(17, 249, 66, 18, 250, 66, 21, 251, 66);
		newFace(17, 249, 66, 21, 251, 66, 20, 252, 66);
		newFace(20, 253, 67, 21, 254, 67, 24, 255, 67);
		newFace(20, 253, 67, 24, 255, 67, 23, 256, 67);
		newFace(23, 257, 68, 24, 258, 68, 27, 259, 68);
		newFace(23, 257, 68, 27, 259, 68, 26, 260, 68);
		newFace(26, 261, 69, 27, 262, 69, 30, 263, 69);
		newFace(26, 261, 69, 30, 263, 69, 29, 264, 69);
		newFace(29, 265, 70, 30, 266, 70, 33, 267, 70);
		newFace(29, 265, 70, 33, 267, 70, 32, 268, 70);
		newFace(32, 269, 71, 33, 270, 71, 36, 271, 71);
		newFace(32, 269, 71, 36, 271, 71, 35, 272, 71);
		newFace(35, 273, 72, 36, 274, 72, 3, 275, 72);
		newFace(35, 273, 72, 3, 275, 72, 2, 276, 72);
		newFace(15, 277, 73, 12, 278, 73, 44, 279, 73);
		newFace(15, 277, 73, 44, 279, 73, 43, 280, 73);
		newFace(44, 281, 74, 12, 282, 74, 9, 283, 74);
		newFace(44, 281, 74, 9, 283, 74, 45, 284, 74);
		newFace(9, 285, 75, 6, 286, 75, 46, 287, 75);
		newFace(9, 285, 75, 46, 287, 75, 45, 288, 75);
		newFace(6, 289, 76, 3, 290, 76, 47, 291, 76);
		newFace(6, 289, 76, 47, 291, 76, 46, 292, 76);
		newFace(3, 293, 77, 36, 294, 77, 48, 295, 77);
		newFace(3, 293, 77, 48, 295, 77, 47, 296, 77);
		newFace(36, 297, 78, 33, 298, 78, 39, 299, 78);
		newFace(36, 297, 78, 39, 299, 78, 48, 300, 78);
		newFace(39, 301, 79, 33, 302, 79, 30, 303, 79);
		newFace(39, 301, 79, 30, 303, 79, 38, 304, 79);
		newFace(30, 305, 80, 27, 306, 80, 37, 307, 80);
		newFace(30, 305, 80, 37, 307, 80, 38, 308, 80);
		newFace(24, 309, 81, 41, 310, 81, 37, 311, 81);
		newFace(24, 309, 81, 37, 311, 81, 27, 312, 81);
		newFace(40, 313, 82, 41, 314, 82, 24, 315, 82);
		newFace(40, 313, 82, 24, 315, 82, 21, 316, 82);
		newFace(18, 317, 83, 42, 318, 83, 40, 319, 83);
		newFace(18, 317, 83, 40, 319, 83, 21, 320, 83);
		newFace(15, 321, 84, 43, 322, 84, 42, 323, 84);
		newFace(15, 321, 84, 42, 323, 84, 18, 324, 84);
		newFace(51, 325, 85, 50, 326, 85, 98, 327, 85);
		newFace(52, 328, 86, 51, 329, 86, 98, 330, 86);
		newFace(53, 331, 87, 52, 332, 87, 98, 333, 87);
		newFace(54, 334, 88, 53, 335, 88, 98, 336, 88);
		newFace(55, 337, 89, 54, 338, 89, 98, 339, 89);
		newFace(56, 340, 90, 55, 341, 90, 98, 342, 90);
		newFace(57, 343, 91, 56, 344, 91, 98, 345, 91);
		newFace(58, 346, 92, 57, 347, 92, 98, 348, 92);
		newFace(59, 349, 93, 58, 350, 93, 98, 351, 93);
		newFace(60, 352, 94, 59, 353, 94, 98, 354, 94);
		newFace(49, 355, 95, 60, 356, 95, 98, 357, 95);
		newFace(50, 358, 96, 49, 359, 96, 98, 360, 96);
	}

	@Override
	public void render(@NotNull PoseStack mStack, @NotNull Function<ResourceLocation, RenderType> type, @NotNull MultiBufferSource bufferSource, int overlay, int light, int color)
	{
		Matrix4f matrix = mStack.last().pose();
		PoseStack.Pose normal = mStack.last();

		VertexConsumer builder = bufferSource.getBuffer(type.apply(this.texture));

		List<Vector3f> vertices = this.vertices;
		List<Vector2f> uvs = this.uvs;
		List<Vector3f> normals = this.normals;

		Minecraft mc = RenderHelper.mc();
		this.usedIndexes.clear();
		float time = mc.level.getGameTime() % 360 + mc.getDeltaTracker().getRealtimeDeltaTicks();

		for (BioObjModel.Face face : this.faces)
		{
			applyDisplacementToFace(face, time, 0.2f, 0.002f, 0.05f);

			Vector2f uv0 = uvs.get(face.v01());
			Vector2f uv1 = uvs.get(face.v11());
			Vector2f uv2 = uvs.get(face.v21());

			if (this.flipUV)
			{
				uv0 = new Vector2f(uv0.x(), 1 - uv0.y());
				uv1 = new Vector2f(uv1.x(), 1 - uv1.y());
				uv2 = new Vector2f(uv2.x(), 1 - uv2.y());
			}

			builder.addVertex(matrix,
					vertices.get(face.v00()).x(),
					vertices.get(face.v00()).y(),
					vertices.get(face.v00()).z()).
					setColor(color).
					setUv(uv0.x(),
					uv0.y()).
					setOverlay(overlay).
					setLight(light).
					setNormal(normal,
					normals.get(face.v02()).x(),
					normals.get(face.v02()).y(),
					normals.get(face.v02()).z());

			builder.addVertex(matrix,
					vertices.get(face.v10()).x(),
					vertices.get(face.v10()).y(),
					vertices.get(face.v10()).z()).
					setColor(color).
					setUv(uv1.x(),
					uv1.y()).
					setOverlay(overlay).
					setLight(light).
					setNormal(normal,
					normals.get(face.v12()).x(),
					normals.get(face.v12()).y(),
					normals.get(face.v12()).z());

			builder.addVertex(matrix,
					vertices.get(face.v20()).x(),
					vertices.get(face.v20()).y(),
					vertices.get(face.v20()).z()).
					setColor(color).
					setUv(uv2.x(),
					uv2.y()).
					setOverlay(overlay).
					setLight(light).
					setNormal(normal,
					normals.get(face.v22()).x(),
					normals.get(face.v22()).y(),
					normals.get(face.v22()).z());
		}
	}

	private void applyDisplacementToFace(@NotNull Face face, float timeSeconds, float thresholdY, float amplitude, float frequency)
	{
		if (!this.usedIndexes.contains(face.v00()))
		{
			applyDisplacement(this.vertices.get(face.v00()), this.normals.get(face.v02()), this.vertexPhases.get(face.v00()), timeSeconds, thresholdY, amplitude, frequency);
			this.usedIndexes.add(face.v00());
		}
		if (!this.usedIndexes.contains(face.v10()))
		{
			applyDisplacement(this.vertices.get(face.v10()), this.normals.get(face.v12()), this.vertexPhases.get(face.v10()), timeSeconds, thresholdY, amplitude, frequency);
			this.usedIndexes.add(face.v10());
		}

		if (!this.usedIndexes.contains(face.v20()))
		{
			applyDisplacement(this.vertices.get(face.v20()), this.normals.get(face.v22()), this.vertexPhases.get(face.v20()), timeSeconds, thresholdY, amplitude, frequency);
			this.usedIndexes.add(face.v20());
		}
	}

	private void applyDisplacement(@NotNull Vector3f vertex, Vector3f normal, float phase, float timeSeconds, float thresholdY, float amplitude, float frequency)
	{
		if (vertex.y() > thresholdY)
		{
			float displacement = amplitude * (float)Math.sin(frequency * timeSeconds + phase);

			Vector3f offset = new Vector3f(normal).mul(displacement);
			vertex.add(offset);
		}
	}

	@Override
	public BioObjModel addVertex(Vector3f vertex)
	{
		BioObjModel model = super.addVertex(vertex);

		this.vertexPhases.add((float) (RANDOM_SOURCE.nextFloat() * 2 * Math.PI) * 0.1f);

		return model;
	}
}
